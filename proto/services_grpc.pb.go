// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: services.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppServices_GetEvents_FullMethodName              = "/endpoints.fcs.v1.AppServices/GetEvents"
	AppServices_GetProjects_FullMethodName            = "/endpoints.fcs.v1.AppServices/GetProjects"
	AppServices_GetKarlsruherTransfers_FullMethodName = "/endpoints.fcs.v1.AppServices/GetKarlsruherTransfers"
)

// AppServicesClient is the client API for AppServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppServicesClient interface {
	GetEvents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Events, error)
	GetProjects(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Projects, error)
	GetKarlsruherTransfers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*KarlsruherTransfers, error)
}

type appServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewAppServicesClient(cc grpc.ClientConnInterface) AppServicesClient {
	return &appServicesClient{cc}
}

func (c *appServicesClient) GetEvents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, AppServices_GetEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServicesClient) GetProjects(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Projects, error) {
	out := new(Projects)
	err := c.cc.Invoke(ctx, AppServices_GetProjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServicesClient) GetKarlsruherTransfers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*KarlsruherTransfers, error) {
	out := new(KarlsruherTransfers)
	err := c.cc.Invoke(ctx, AppServices_GetKarlsruherTransfers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppServicesServer is the server API for AppServices service.
// All implementations must embed UnimplementedAppServicesServer
// for forward compatibility
type AppServicesServer interface {
	GetEvents(context.Context, *emptypb.Empty) (*Events, error)
	GetProjects(context.Context, *emptypb.Empty) (*Projects, error)
	GetKarlsruherTransfers(context.Context, *emptypb.Empty) (*KarlsruherTransfers, error)
	mustEmbedUnimplementedAppServicesServer()
}

// UnimplementedAppServicesServer must be embedded to have forward compatible implementations.
type UnimplementedAppServicesServer struct {
}

func (UnimplementedAppServicesServer) GetEvents(context.Context, *emptypb.Empty) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}
func (UnimplementedAppServicesServer) GetProjects(context.Context, *emptypb.Empty) (*Projects, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjects not implemented")
}
func (UnimplementedAppServicesServer) GetKarlsruherTransfers(context.Context, *emptypb.Empty) (*KarlsruherTransfers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKarlsruherTransfers not implemented")
}
func (UnimplementedAppServicesServer) mustEmbedUnimplementedAppServicesServer() {}

// UnsafeAppServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppServicesServer will
// result in compilation errors.
type UnsafeAppServicesServer interface {
	mustEmbedUnimplementedAppServicesServer()
}

func RegisterAppServicesServer(s grpc.ServiceRegistrar, srv AppServicesServer) {
	s.RegisterService(&AppServices_ServiceDesc, srv)
}

func _AppServices_GetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServicesServer).GetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppServices_GetEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServicesServer).GetEvents(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppServices_GetProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServicesServer).GetProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppServices_GetProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServicesServer).GetProjects(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppServices_GetKarlsruherTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServicesServer).GetKarlsruherTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppServices_GetKarlsruherTransfers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServicesServer).GetKarlsruherTransfers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AppServices_ServiceDesc is the grpc.ServiceDesc for AppServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "endpoints.fcs.v1.AppServices",
	HandlerType: (*AppServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEvents",
			Handler:    _AppServices_GetEvents_Handler,
		},
		{
			MethodName: "GetProjects",
			Handler:    _AppServices_GetProjects_Handler,
		},
		{
			MethodName: "GetKarlsruherTransfers",
			Handler:    _AppServices_GetKarlsruherTransfers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}
